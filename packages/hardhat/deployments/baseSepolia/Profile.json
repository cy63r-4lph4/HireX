{
  "address": "0x168F88d61510A971Efa87d4AA3fA718Be1Ac9F90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coreToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ensManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_faucetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasEFP",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "credentialHash",
          "type": "string"
        }
      ],
      "name": "ProfileCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newScore",
          "type": "uint256"
        }
      ],
      "name": "ReputationUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "preferredName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_hasEFP",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "credentialHash",
          "type": "string"
        }
      ],
      "name": "createProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensManager",
      "outputs": [
        {
          "internalType": "contract IENSManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "faucetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ensName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasEFP",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "credentialHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reputation",
              "type": "uint256"
            }
          ],
          "internalType": "struct Profile.UserProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profileCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "profiles",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ensName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasEFP",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "credentialHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reputation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newMetadataURI",
          "type": "string"
        }
      ],
      "name": "updateMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2288afca9847a8ff9f7484ae743d9a3830ab071b9ee25151d75540412eb5bbed",
  "receipt": {
    "to": null,
    "from": "0x065505c4fD54b71f03e6b8A7ef77acB443A80845",
    "contractAddress": "0x168F88d61510A971Efa87d4AA3fA718Be1Ac9F90",
    "transactionIndex": 14,
    "gasUsed": "1245673",
    "logsBloom": "0x
    "blockHash": "0x7d5177e7e530a6bb39e385e13fbb2176787dfe75055ba43d6faca5a2b94a7c59",
    "transactionHash": "0x2288afca9847a8ff9f7484ae743d9a3830ab071b9ee25151d75540412eb5bbed",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 30653048,
        "transactionHash": "0x2288afca9847a8ff9f7484ae743d9a3830ab071b9ee25151d75540412eb5bbed",
        "address": "0x168F88d61510A971Efa87d4AA3fA718Be1Ac9F90",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000065505c4fd54b71f03e6b8a7ef77acb443a80845"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x7d5177e7e530a6bb39e385e13fbb2176787dfe75055ba43d6faca5a2b94a7c59"
      }
    ],
    "blockNumber": 30653048,
    "cumulativeGasUsed": "6454400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb5d8887AB09AdB5983AACEed4e1AbB9267407823",
    "0x7b4C55800f9446D2F2467f570ee323468ef3EFBE",
    "1000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f59201d33ebc122c6a8858b77aeba1b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_faucetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasEFP\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"credentialHash\",\"type\":\"string\"}],\"name\":\"ProfileCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"}],\"name\":\"ReputationUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"preferredName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_hasEFP\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"credentialHash\",\"type\":\"string\"}],\"name\":\"createProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensManager\",\"outputs\":[{\"internalType\":\"contract IENSManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasEFP\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"credentialHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"}],\"internalType\":\"struct Profile.UserProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profiles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasEFP\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"credentialHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Profile.sol\":\"Profile\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IENSManager {\\n    function registerSubname(address _user, string calldata preferredName) external returns (string memory);\\n}\\n\\ncontract Profile is Ownable {\\n    struct UserProfile {\\n        address user;\\n        string ensName;\\n        string metadataURI;\\n        bool exists;\\n        bool hasEFP;\\n        string credentialHash;\\n        uint256 reputation;\\n    }\\n\\n    uint256 private _profileIds; // replaced CountersUpgradeable\\n    mapping(address => UserProfile) public profiles;\\n\\n    IERC20 public coreToken;\\n    IENSManager public ensManager;\\n    uint256 public faucetAmount;\\n\\n    event ProfileCreated(address indexed user, string ensName, string metadataURI, bool hasEFP, string credentialHash);\\n    event ReputationUpdated(address indexed user, uint256 newScore);\\n    event MetadataUpdated(address indexed user, string newURI);\\n\\n    constructor(address _coreToken, address _ensManager, uint256 _faucetAmount) Ownable(msg.sender) {\\n        coreToken = IERC20(_coreToken);\\n        ensManager = IENSManager(_ensManager);\\n        faucetAmount = _faucetAmount;\\n    }\\n\\n    function createProfile(\\n        address _user,\\n        string calldata preferredName,\\n        string calldata metadataURI,\\n        bool _hasEFP,\\n        string calldata credentialHash\\n    ) external {\\n        require(!profiles[_user].exists, \\\"Profile already exists\\\");\\n\\n        string memory ensName = ensManager.registerSubname(_user, preferredName);\\n\\n        profiles[_user] = UserProfile({\\n            user: _user,\\n            ensName: ensName,\\n            metadataURI: metadataURI,\\n            exists: true,\\n            hasEFP: _hasEFP,\\n            credentialHash: credentialHash,\\n            reputation: _hasEFP ? 10 : 0\\n        });\\n\\n        _profileIds++; // increment manually\\n\\n        // external transfer after state update\\n        require(coreToken.transfer(_user, faucetAmount), \\\"Airdrop failed\\\");\\n\\n        emit ProfileCreated(_user, ensName, metadataURI, _hasEFP, credentialHash);\\n    }\\n\\n    function updateMetadata(address _user, string calldata newMetadataURI) external {\\n        require(profiles[_user].exists, \\\"Profile not found\\\");\\n        require(msg.sender == _user || msg.sender == owner(), \\\"Not authorized\\\");\\n\\n        profiles[_user].metadataURI = newMetadataURI;\\n        emit MetadataUpdated(_user, newMetadataURI);\\n    }\\n\\n    function addReputation(address _user, uint256 amount) external onlyOwner {\\n        require(profiles[_user].exists, \\\"Profile not found\\\");\\n        profiles[_user].reputation += amount;\\n        emit ReputationUpdated(_user, profiles[_user].reputation);\\n    }\\n\\n    function getProfile(address _user) external view returns (UserProfile memory) {\\n        return profiles[_user];\\n    }\\n\\n    function profileCount() external view returns (uint256) {\\n        return _profileIds;\\n    }\\n}\\n\",\"keccak256\":\"0x5a0729e7f37302f160424708b2460cf553a64e9e54be91fff0b2edeeeb56168a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015313803806200153183398101604081905262000034916200010d565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006681620000a0565b50600380546001600160a01b039485166001600160a01b03199182161790915560048054939094169216919091179091556005556200014e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010857600080fd5b919050565b6000806000606084860312156200012357600080fd5b6200012e84620000f0565b92506200013e60208501620000f0565b9150604084015190509250925092565b6113d3806200015e6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063bbe1562711610071578063bbe156271461014e578063da38d49814610174578063e24f831314610187578063ed00b3bc1461019a578063ef43acef146101ad578063f2fde38b146101b557600080fd5b80630c2b72e9146100b95780630f53a470146100e95780635a6971f914610109578063715018a61461011c5780638da5cb5b146101265780639c28143014610137575b600080fd5b6003546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fc6100f7366004610c91565b6101c8565b6040516100e09190610d03565b6004546100cc906001600160a01b031681565b610124610432565b005b6000546001600160a01b03166100cc565b61014060055481565b6040519081526020016100e0565b61016161015c366004610c91565b610446565b6040516100e09796959493929190610da6565b610124610182366004610e5e565b61062c565b610124610195366004610eb1565b61075e565b6101246101a8366004610ee9565b610849565b600154610140565b6101246101c3366004610c91565b610bba565b6102156040518060e0016040528060006001600160a01b03168152602001606081526020016060815260200160001515815260200160001515815260200160608152602001600081525090565b6001600160a01b03808316600090815260026020908152604091829020825160e08101909352805490931682526001830180549293929184019161025890610fa8565b80601f016020809104026020016040519081016040528092919081815260200182805461028490610fa8565b80156102d15780601f106102a6576101008083540402835291602001916102d1565b820191906000526020600020905b8154815290600101906020018083116102b457829003601f168201915b505050505081526020016002820180546102ea90610fa8565b80601f016020809104026020016040519081016040528092919081815260200182805461031690610fa8565b80156103635780601f1061033857610100808354040283529160200191610363565b820191906000526020600020905b81548152906001019060200180831161034657829003601f168201915b5050509183525050600382015460ff80821615156020840152610100909104161515604082015260048201805460609092019161039f90610fa8565b80601f01602080910402602001604051908101604052809291908181526020018280546103cb90610fa8565b80156104185780601f106103ed57610100808354040283529160200191610418565b820191906000526020600020905b8154815290600101906020018083116103fb57829003601f168201915b505050505081526020016005820154815250509050919050565b61043a610bf8565b6104446000610c25565b565b600260205260009081526040902080546001820180546001600160a01b03909216929161047290610fa8565b80601f016020809104026020016040519081016040528092919081815260200182805461049e90610fa8565b80156104eb5780601f106104c0576101008083540402835291602001916104eb565b820191906000526020600020905b8154815290600101906020018083116104ce57829003601f168201915b50505050509080600201805461050090610fa8565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90610fa8565b80156105795780601f1061054e57610100808354040283529160200191610579565b820191906000526020600020905b81548152906001019060200180831161055c57829003601f168201915b505050506003830154600484018054939460ff80841695610100909404169350916105a390610fa8565b80601f01602080910402602001604051908101604052809291908181526020018280546105cf90610fa8565b801561061c5780601f106105f15761010080835404028352916020019161061c565b820191906000526020600020905b8154815290600101906020018083116105ff57829003601f168201915b5050505050908060050154905087565b6001600160a01b03831660009081526002602052604090206003015460ff166106905760405162461bcd60e51b8152602060048201526011602482015270141c9bd99a5b19481b9bdd08199bdd5b99607a1b60448201526064015b60405180910390fd5b336001600160a01b03841614806106b157506000546001600160a01b031633145b6106ee5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610687565b6001600160a01b038316600090815260026020819052604090912001610715828483611047565b50826001600160a01b03167f2013570c343af8ab14a9778150e381a0fda34ed6368127a95fd5e7210cbec5bf8383604051610751929190611131565b60405180910390a2505050565b610766610bf8565b6001600160a01b03821660009081526002602052604090206003015460ff166107c55760405162461bcd60e51b8152602060048201526011602482015270141c9bd99a5b19481b9bdd08199bdd5b99607a1b6044820152606401610687565b6001600160a01b038216600090815260026020526040812060050180548392906107f0908490611163565b90915550506001600160a01b0382166000818152600260209081526040918290206005015491519182527ffc577563f1b9a0461e24abef1e1fcc0d33d3d881f20b5df6dda59de4aae2c821910160405180910390a25050565b6001600160a01b03881660009081526002602052604090206003015460ff16156108ae5760405162461bcd60e51b815260206004820152601660248201527550726f66696c6520616c72656164792065786973747360501b6044820152606401610687565b6004805460405163e251db7b60e01b81526000926001600160a01b039092169163e251db7b916108e4918d918d918d910161117c565b6000604051808303816000875af1158015610903573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092b91908101906111aa565b90506040518060e001604052808a6001600160a01b0316815260200182815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060016020808301919091528615156040808401919091528051601f8701839004830281018301909152858152606090920191908690869081908401838280828437600092019190915250505090825250602001856109e55760006109e8565b600a5b60ff1690526001600160a01b038a81166000908152600260209081526040909120835181546001600160a01b03191693169290921782558201516001820190610a319082611257565b5060408201516002820190610a469082611257565b506060820151600382018054608085015115156101000261ff00199315159390931661ffff199091161791909117905560a08201516004820190610a8a9082611257565b5060c0919091015160059091015560018054906000610aa883611317565b909155505060035460055460405163a9059cbb60e01b81526001600160a01b038c81166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b279190611330565b610b645760405162461bcd60e51b815260206004820152600e60248201526d105a5c991c9bdc0819985a5b195960921b6044820152606401610687565b886001600160a01b03167fd7f22e8f4dcfe048677938555fdde23006bedf1d9447a8feed4a088e24e4c7be828888888888604051610ba79695949392919061134d565b60405180910390a2505050505050505050565b610bc2610bf8565b6001600160a01b038116610bec57604051631e4fbdf760e01b815260006004820152602401610687565b610bf581610c25565b50565b6000546001600160a01b031633146104445760405163118cdaa760e01b8152336004820152602401610687565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610c8c57600080fd5b919050565b600060208284031215610ca357600080fd5b610cac82610c75565b9392505050565b60005b83811015610cce578181015183820152602001610cb6565b50506000910152565b60008151808452610cef816020860160208601610cb3565b601f01601f19169290920160200192915050565b602080825282516001600160a01b03168282015282015160e06040830152600090610d32610100840182610cd7565b90506040840151601f1980858403016060860152610d508383610cd7565b925060608601511515608086015260808601519150610d7360a086018315159052565b60a08601519150808584030160c086015250610d8f8282610cd7565b91505060c084015160e08401528091505092915050565b6001600160a01b038816815260e060208201819052600090610dca90830189610cd7565b8281036040840152610ddc8189610cd7565b90508615156060840152851515608084015282810360a0840152610e008186610cd7565b9150508260c083015298975050505050505050565b60008083601f840112610e2757600080fd5b50813567ffffffffffffffff811115610e3f57600080fd5b602083019150836020828501011115610e5757600080fd5b9250929050565b600080600060408486031215610e7357600080fd5b610e7c84610c75565b9250602084013567ffffffffffffffff811115610e9857600080fd5b610ea486828701610e15565b9497909650939450505050565b60008060408385031215610ec457600080fd5b610ecd83610c75565b946020939093013593505050565b8015158114610bf557600080fd5b60008060008060008060008060a0898b031215610f0557600080fd5b610f0e89610c75565b9750602089013567ffffffffffffffff80821115610f2b57600080fd5b610f378c838d01610e15565b909950975060408b0135915080821115610f5057600080fd5b610f5c8c838d01610e15565b909750955060608b01359150610f7182610edb565b90935060808a01359080821115610f8757600080fd5b50610f948b828c01610e15565b999c989b5096995094979396929594505050565b600181811c90821680610fbc57607f821691505b602082108103610fdc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f82111561104257600081815260208120601f850160051c8101602086101561101f5750805b601f850160051c820191505b8181101561103e5782815560010161102b565b5050505b505050565b67ffffffffffffffff83111561105f5761105f610fe2565b6110738361106d8354610fa8565b83610ff8565b6000601f8411600181146110a7576000851561108f5750838201355b600019600387901b1c1916600186901b178355611101565b600083815260209020601f19861690835b828110156110d857868501358255602094850194600190920191016110b8565b50868210156110f55760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611145602083018486611108565b949350505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156111765761117661114d565b92915050565b6001600160a01b03841681526040602082018190526000906111a19083018486611108565b95945050505050565b6000602082840312156111bc57600080fd5b815167ffffffffffffffff808211156111d457600080fd5b818401915084601f8301126111e857600080fd5b8151818111156111fa576111fa610fe2565b604051601f8201601f19908116603f0116810190838211818310171561122257611222610fe2565b8160405282815287602084870101111561123b57600080fd5b61124c836020830160208801610cb3565b979650505050505050565b815167ffffffffffffffff81111561127157611271610fe2565b6112858161127f8454610fa8565b84610ff8565b602080601f8311600181146112ba57600084156112a25750858301515b600019600386901b1c1916600185901b17855561103e565b600085815260208120601f198616915b828110156112e9578886015182559484019460019091019084016112ca565b50858210156113075787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600182016113295761132961114d565b5060010190565b60006020828403121561134257600080fd5b8151610cac81610edb565b6080815260006113606080830189610cd7565b828103602084015261137381888a611108565b905085151560408401528281036060840152611390818587611108565b999850505050505050505056fea26469706673582212204d8d9af2f1df38c60785f58055f80f732c4795f0ea6a72b669e40662793b730764736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Profile.sol:Profile",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1050,
        "contract": "contracts/Profile.sol:Profile",
        "label": "_profileIds",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1055,
        "contract": "contracts/Profile.sol:Profile",
        "label": "profiles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UserProfile)1048_storage)"
      },
      {
        "astId": 1058,
        "contract": "contracts/Profile.sol:Profile",
        "label": "coreToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 1061,
        "contract": "contracts/Profile.sol:Profile",
        "label": "ensManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IENSManager)1031"
      },
      {
        "astId": 1063,
        "contract": "contracts/Profile.sol:Profile",
        "label": "faucetAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IENSManager)1031": {
        "encoding": "inplace",
        "label": "contract IENSManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserProfile)1048_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Profile.UserProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(UserProfile)1048_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserProfile)1048_storage": {
        "encoding": "inplace",
        "label": "struct Profile.UserProfile",
        "members": [
          {
            "astId": 1035,
            "contract": "contracts/Profile.sol:Profile",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1037,
            "contract": "contracts/Profile.sol:Profile",
            "label": "ensName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1039,
            "contract": "contracts/Profile.sol:Profile",
            "label": "metadataURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1041,
            "contract": "contracts/Profile.sol:Profile",
            "label": "exists",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1043,
            "contract": "contracts/Profile.sol:Profile",
            "label": "hasEFP",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1045,
            "contract": "contracts/Profile.sol:Profile",
            "label": "credentialHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1047,
            "contract": "contracts/Profile.sol:Profile",
            "label": "reputation",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}