{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/JobEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract JobEscrow is ReentrancyGuard {\n    enum JobStatus {\n        Created,\n        Funded,\n        Completed,\n        Released,\n        Cancelled\n    }\n\n    address public hirer;\n    address public worker;\n    uint256 public amount;\n    IERC20 public coreToken;\n    JobStatus public status;\n\n    event JobInitialized(address indexed hirer, address indexed worker, uint256 amount);\n    event JobFunded(address indexed hirer, uint256 amount);\n    event JobCompleted(address indexed worker);\n    event PaymentReleased(address indexed worker, uint256 amount);\n    event JobCancelled(address indexed hirer, uint256 refund);\n\n    modifier onlyHirer() {\n        require(msg.sender == hirer, \"Only hirer\");\n        _;\n    }\n\n    modifier onlyWorker() {\n        require(msg.sender == worker, \"Only worker\");\n        _;\n    }\n\n    constructor(address _hirer, address _worker, uint256 _amount, address _coreToken) {\n        require(_hirer != address(0), \"Invalid hirer\");\n        require(_worker != address(0), \"Invalid worker\");\n        require(_amount > 0, \"Invalid amount\");\n\n        hirer = _hirer;\n        worker = _worker;\n        amount = _amount;\n        coreToken = IERC20(_coreToken);\n        status = JobStatus.Created;\n\n        emit JobInitialized(_hirer, _worker, _amount);\n    }\n\n    function fundJob() external onlyHirer nonReentrant {\n        require(status == JobStatus.Created, \"Job not in created state\");\n        require(coreToken.transferFrom(hirer, address(this), amount), \"Funding failed\");\n\n        status = JobStatus.Funded;\n        emit JobFunded(hirer, amount);\n    }\n\n    function markCompleted() external onlyWorker {\n        require(status == JobStatus.Funded, \"Job not funded\");\n        status = JobStatus.Completed;\n        emit JobCompleted(worker);\n    }\n\n    function releasePayment() external onlyHirer nonReentrant {\n        require(status == JobStatus.Completed, \"Job not completed\");\n        status = JobStatus.Released;\n\n        require(coreToken.transfer(worker, amount), \"Payment failed\");\n        emit PaymentReleased(worker, amount);\n    }\n\n    function cancelJob() external onlyHirer nonReentrant {\n        require(status == JobStatus.Funded || status == JobStatus.Created, \"Job not cancellable\");\n\n        JobStatus prev = status;\n        status = JobStatus.Cancelled;\n\n        if (prev == JobStatus.Funded) {\n            require(coreToken.transfer(hirer, amount), \"Refund failed\");\n            emit JobCancelled(hirer, amount);\n        } else {\n            emit JobCancelled(hirer, 0);\n        }\n    }\n}\n"
    },
    "contracts/JobFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IProfile {\n    function getProfile(\n        address _user\n    )\n        external\n        view\n        returns (\n            address user,\n            string memory ensName,\n            string memory metadataURI,\n            bool exists,\n            bool hasEFP,\n            uint256 reputation\n        );\n}\n\ncontract JobFactory is Ownable {\n    enum JobStatus {\n        Open,\n        Assigned,\n        Completed,\n        Cancelled\n    }\n\n    struct Job {\n        uint256 id;\n        address client;\n        address worker;\n        string title;\n        string metadataURI;\n        uint256 budget;\n        uint256 deadline;\n        JobStatus status;\n    }\n\n    IERC20 public coreToken;\n    IProfile public profileContract;\n\n    uint256 public jobCount;\n    mapping(uint256 => Job) public jobs;\n\n    event JobCreated(uint256 indexed jobId, address indexed client, uint256 budget);\n    event JobAssigned(uint256 indexed jobId, address indexed worker);\n    event JobCompleted(uint256 indexed jobId, address indexed worker);\n    event JobCancelled(uint256 indexed jobId);\n\n    constructor(address _coreToken, address _profileContract) Ownable(msg.sender) {\n        coreToken = IERC20(_coreToken);\n        profileContract = IProfile(_profileContract);\n    }\n\n    /// @notice Client posts a job with budget locked in escrow\n    /// @param hirer the real client funding the job\n    function createJob(\n        address hirer,\n        string calldata title,\n        string calldata metadataURI,\n        uint256 budget,\n        uint256 deadline\n    ) external {\n        require(hirer != address(0), \"Invalid hirer\");\n        require(budget > 0, \"Invalid budget\");\n        require(deadline > block.timestamp, \"Deadline must be future\");\n\n        // pull tokens from hirer's wallet (not relayer)\n        require(coreToken.transferFrom(hirer, address(this), budget), \"Funding failed\");\n\n        jobCount++;\n        jobs[jobCount] = Job({\n            id: jobCount,\n            client: hirer,\n            worker: address(0),\n            title: title,\n            metadataURI: metadataURI,\n            budget: budget,\n            deadline: deadline,\n            status: JobStatus.Open\n        });\n\n        emit JobCreated(jobCount, hirer, budget);\n    }\n\n    /// @notice Worker accepts job\n    function acceptJob(uint256 jobId) external {\n        Job storage job = jobs[jobId];\n        require(job.status == JobStatus.Open, \"Job not open\");\n        require(job.client != msg.sender, \"Client cannot take own job\");\n\n        // check profile exists\n        (, , , bool exists, , ) = profileContract.getProfile(msg.sender);\n        require(exists, \"Worker must have profile\");\n\n        job.worker = msg.sender;\n        job.status = JobStatus.Assigned;\n\n        emit JobAssigned(jobId, msg.sender);\n    }\n\n    /// @notice Client marks job as completed → releases payment\n    function completeJob(uint256 jobId) external {\n        Job storage job = jobs[jobId];\n        require(job.status == JobStatus.Assigned, \"Not assigned\");\n        require(job.client == msg.sender, \"Only client can complete\");\n\n        // ✅ update state first\n        job.status = JobStatus.Completed;\n        address worker = job.worker;\n        uint256 amount = job.budget;\n\n        // then external call\n        require(coreToken.transfer(worker, amount), \"Payment failed\");\n\n        emit JobCompleted(jobId, worker);\n    }\n\n    /// @notice Client cancels before worker accepts\n    function cancelJob(uint256 jobId) external {\n        Job storage job = jobs[jobId];\n        require(job.status == JobStatus.Open, \"Job not open\");\n        require(job.client == msg.sender, \"Only client can cancel\");\n\n        job.status = JobStatus.Cancelled;\n        uint256 refund = job.budget;\n        address client = job.client;\n\n        require(coreToken.transfer(client, refund), \"Refund failed\");\n\n        emit JobCancelled(jobId);\n    }\n\n    function getJob(uint256 jobId) external view returns (Job memory) {\n        require(jobId > 0 && jobId <= jobCount, \"Invalid jobId\");\n        return jobs[jobId];\n    }\n\n    function getAllJobs() external view returns (Job[] memory) {\n        Job[] memory all = new Job[](jobCount);\n        for (uint256 i = 1; i <= jobCount; i++) {\n            all[i - 1] = jobs[i];\n        }\n        return all;\n    }\n\n    function getOpenJobs() external view returns (Job[] memory) {\n        // count first\n        uint256 count = 0;\n        for (uint256 i = 1; i <= jobCount; i++) {\n            if (jobs[i].status == JobStatus.Open) {\n                count++;\n            }\n        }\n        // fill array\n        Job[] memory openJobs = new Job[](count);\n        uint256 index = 0;\n        for (uint256 i = 1; i <= jobCount; i++) {\n            if (jobs[i].status == JobStatus.Open) {\n                openJobs[index] = jobs[i];\n                index++;\n            }\n        }\n        return openJobs;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}