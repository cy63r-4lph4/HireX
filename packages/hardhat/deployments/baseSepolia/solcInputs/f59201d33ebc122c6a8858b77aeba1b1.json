{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/EnsManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ENSManager is Ownable {\n    string public baseDomain;\n\n    mapping(string => address) public subnameOwners;\n    mapping(address => string) public addressToSubname;\n\n    event SubnameRegistered(address indexed user, string subname);\n\n    constructor(string memory _baseDomain) Ownable(msg.sender) {\n        baseDomain = _baseDomain;\n    }\n\n    function isAvailable(string calldata name) public view returns (bool) {\n        return subnameOwners[name] == address(0);\n    }\n\n    function registerSubname(address _user, string calldata name) external onlyOwner returns (string memory) {\n        require(isAvailable(name), \"Name already taken\");\n\n        subnameOwners[name] = _user;\n        addressToSubname[_user] = name;\n\n        string memory fullName = string(abi.encodePacked(name, \".\", baseDomain));\n\n        emit SubnameRegistered(_user, fullName);\n        return fullName;\n    }\n\n    function getFullName(address _user) external view returns (string memory) {\n        string memory name = addressToSubname[_user];\n        if (bytes(name).length == 0) return \"\";\n        return string(abi.encodePacked(name, \".\", baseDomain));\n    }\n}\n"
    },
    "contracts/JobEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract JobEscrow {\n    enum JobStatus {\n        Created,\n        Funded,\n        Completed,\n        Released,\n        Cancelled\n    }\n\n    address public hirer;\n    address public worker;\n    uint256 public amount;\n    IERC20 public coreToken;\n    JobStatus public status;\n\n    event JobInitialized(address indexed hirer, address indexed worker, uint256 amount);\n    event JobFunded(address indexed hirer, uint256 amount);\n    event JobCompleted(address indexed worker);\n    event PaymentReleased(address indexed worker, uint256 amount);\n    event JobCancelled(address indexed hirer, uint256 refund);\n\n    modifier onlyHirer() {\n        require(msg.sender == hirer, \"Only hirer\");\n        _;\n    }\n\n    modifier onlyWorker() {\n        require(msg.sender == worker, \"Only worker\");\n        _;\n    }\n\n    constructor(address _hirer, address _worker, uint256 _amount, address _coreToken) {\n        hirer = _hirer;\n        worker = _worker;\n        amount = _amount;\n        coreToken = IERC20(_coreToken);\n        status = JobStatus.Created;\n\n        emit JobInitialized(_hirer, _worker, _amount);\n    }\n\n    function fundJob() external onlyHirer {\n        require(status == JobStatus.Created, \"Job not in created state\");\n        require(coreToken.transferFrom(hirer, address(this), amount), \"Funding failed\");\n\n        status = JobStatus.Funded;\n        emit JobFunded(hirer, amount);\n    }\n\n    function markCompleted() external onlyWorker {\n        require(status == JobStatus.Funded, \"Job not funded\");\n        status = JobStatus.Completed;\n        emit JobCompleted(worker);\n    }\n\n    function releasePayment() external onlyHirer {\n        require(status == JobStatus.Completed, \"Job not completed\");\n        status = JobStatus.Released;\n\n        require(coreToken.transfer(worker, amount), \"Payment failed\");\n        emit PaymentReleased(worker, amount);\n    }\n\n    function cancelJob() external onlyHirer {\n        require(status == JobStatus.Funded || status == JobStatus.Created, \"Job not cancellable\");\n\n        status = JobStatus.Cancelled;\n        if (status == JobStatus.Funded) {\n            require(coreToken.transfer(hirer, amount), \"Refund failed\");\n        }\n        emit JobCancelled(hirer, amount);\n    }\n}\n"
    },
    "contracts/JobFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IProfile {\n    function getProfile(\n        address _user\n    )\n        external\n        view\n        returns (\n            address user,\n            string memory ensName,\n            string memory metadataURI,\n            bool exists,\n            bool hasEFP,\n            uint256 reputation\n        );\n}\n\ncontract JobFactory is  Ownable{\n    enum JobStatus {\n        Open,\n        Assigned,\n        Completed,\n        Cancelled\n    }\n\n    struct Job {\n        uint256 id;\n        address client;\n        address worker;\n        string title;\n        string descriptionURI;\n        uint256 budget;\n        uint256 deadline;\n        JobStatus status;\n    }\n\n    IERC20 public coreToken;\n    IProfile public profileContract;\n\n    uint256 public jobCount;\n    mapping(uint256 => Job) public jobs;\n\n    event JobCreated(uint256 indexed jobId, address indexed client, uint256 budget);\n    event JobAssigned(uint256 indexed jobId, address indexed worker);\n    event JobCompleted(uint256 indexed jobId, address indexed worker);\n    event JobCancelled(uint256 indexed jobId);\n\n    constructor (address _coreToken, address _profileContract) Ownable(msg.sender) {\n        coreToken = IERC20(_coreToken);\n        profileContract = IProfile(_profileContract);\n    }\n\n    /// @notice Client posts a job with budget locked in escrow\n    function createJob(\n        string calldata title,\n        string calldata descriptionURI,\n        uint256 budget,\n        uint256 deadline\n    ) external {\n        require(budget > 0, \"Invalid budget\");\n        require(deadline > block.timestamp, \"Deadline must be future\");\n\n        // transfer budget to contract\n        require(coreToken.transferFrom(msg.sender, address(this), budget), \"Funding failed\");\n\n        jobCount++;\n        jobs[jobCount] = Job({\n            id: jobCount,\n            client: msg.sender,\n            worker: address(0),\n            title: title,\n            descriptionURI: descriptionURI,\n            budget: budget,\n            deadline: deadline,\n            status: JobStatus.Open\n        });\n\n        emit JobCreated(jobCount, msg.sender, budget);\n    }\n\n    /// @notice Worker accepts job\n    function acceptJob(uint256 jobId) external {\n        Job storage job = jobs[jobId];\n        require(job.status == JobStatus.Open, \"Job not open\");\n        require(job.client != msg.sender, \"Client cannot take own job\");\n\n        // check profile exists\n        (, , , bool exists, , ) = profileContract.getProfile(msg.sender);\n        require(exists, \"Worker must have profile\");\n\n        job.worker = msg.sender;\n        job.status = JobStatus.Assigned;\n\n        emit JobAssigned(jobId, msg.sender);\n    }\n\n    /// @notice Client marks job as completed → releases payment\n    function completeJob(uint256 jobId) external {\n        Job storage job = jobs[jobId];\n        require(job.status == JobStatus.Assigned, \"Not assigned\");\n        require(job.client == msg.sender, \"Only client can complete\");\n\n        // ✅ update state first\n        job.status = JobStatus.Completed;\n        address worker = job.worker;\n        uint256 amount = job.budget;\n\n        // then external call\n        require(coreToken.transfer(worker, amount), \"Payment failed\");\n\n        emit JobCompleted(jobId, worker);\n    }\n\n    /// @notice Client cancels before worker accepts\n    function cancelJob(uint256 jobId) external {\n        Job storage job = jobs[jobId];\n        require(job.status == JobStatus.Open, \"Job not open\");\n        require(job.client == msg.sender, \"Only client can cancel\");\n\n        job.status = JobStatus.Cancelled;\n        uint256 refund = job.budget;\n        address client = job.client;\n\n        require(coreToken.transfer(client, refund), \"Refund failed\");\n\n        emit JobCancelled(jobId);\n    }\n}\n"
    },
    "contracts/Profile.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IENSManager {\n    function registerSubname(address _user, string calldata preferredName) external returns (string memory);\n}\n\ncontract Profile is Ownable {\n    struct UserProfile {\n        address user;\n        string ensName;\n        string metadataURI;\n        bool exists;\n        bool hasEFP;\n        string credentialHash;\n        uint256 reputation;\n    }\n\n    uint256 private _profileIds; // replaced CountersUpgradeable\n    mapping(address => UserProfile) public profiles;\n\n    IERC20 public coreToken;\n    IENSManager public ensManager;\n    uint256 public faucetAmount;\n\n    event ProfileCreated(address indexed user, string ensName, string metadataURI, bool hasEFP, string credentialHash);\n    event ReputationUpdated(address indexed user, uint256 newScore);\n    event MetadataUpdated(address indexed user, string newURI);\n\n    constructor(address _coreToken, address _ensManager, uint256 _faucetAmount) Ownable(msg.sender) {\n        coreToken = IERC20(_coreToken);\n        ensManager = IENSManager(_ensManager);\n        faucetAmount = _faucetAmount;\n    }\n\n    function createProfile(\n        address _user,\n        string calldata preferredName,\n        string calldata metadataURI,\n        bool _hasEFP,\n        string calldata credentialHash\n    ) external {\n        require(!profiles[_user].exists, \"Profile already exists\");\n\n        string memory ensName = ensManager.registerSubname(_user, preferredName);\n\n        profiles[_user] = UserProfile({\n            user: _user,\n            ensName: ensName,\n            metadataURI: metadataURI,\n            exists: true,\n            hasEFP: _hasEFP,\n            credentialHash: credentialHash,\n            reputation: _hasEFP ? 10 : 0\n        });\n\n        _profileIds++; // increment manually\n\n        // external transfer after state update\n        require(coreToken.transfer(_user, faucetAmount), \"Airdrop failed\");\n\n        emit ProfileCreated(_user, ensName, metadataURI, _hasEFP, credentialHash);\n    }\n\n    function updateMetadata(address _user, string calldata newMetadataURI) external {\n        require(profiles[_user].exists, \"Profile not found\");\n        require(msg.sender == _user || msg.sender == owner(), \"Not authorized\");\n\n        profiles[_user].metadataURI = newMetadataURI;\n        emit MetadataUpdated(_user, newMetadataURI);\n    }\n\n    function addReputation(address _user, uint256 amount) external onlyOwner {\n        require(profiles[_user].exists, \"Profile not found\");\n        profiles[_user].reputation += amount;\n        emit ReputationUpdated(_user, profiles[_user].reputation);\n    }\n\n    function getProfile(address _user) external view returns (UserProfile memory) {\n        return profiles[_user];\n    }\n\n    function profileCount() external view returns (uint256) {\n        return _profileIds;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}